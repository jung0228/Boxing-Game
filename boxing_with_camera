import cv2
import mediapipe as mp
import pygame
import sys
import numpy as np

# 초기 설정
pygame.init()
screen_width, screen_height = 800, 600
screen = pygame.display.set_mode((screen_width, screen_height))
pygame.display.set_caption("Stickman Boxing")

# 색상 및 폰트 설정
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
font = pygame.font.Font(None, 36)

# 스틱맨 클래스 정의
class Stickman:
    def __init__(self, x, y, direction):
        self.x = x
        self.y = y
        self.health = 100
        self.stance = "idle"  # idle, attack, defend
        self.direction = direction

    def draw(self, screen):
        head_radius = 60
        body_length = 180
        arm_length = 120

        # Draw head
        pygame.draw.circle(screen, BLACK, (self.x, self.y - head_radius - body_length), head_radius)
        # Draw body
        pygame.draw.line(screen, BLACK, (self.x, self.y - body_length), (self.x, self.y), 8)

        if self.stance == "idle":
            # Draw arms in idle position
            if self.direction == "left":
                pygame.draw.line(screen, BLACK, (self.x, self.y - body_length + 60), (self.x - arm_length // 2, self.y - body_length + 60), 8)
                pygame.draw.line(screen, BLACK, (self.x, self.y - body_length + 60), (self.x + arm_length // 2, self.y - body_length + 30), 8)
            else:
                pygame.draw.line(screen, BLACK, (self.x, self.y - body_length + 60), (self.x + arm_length // 2, self.y - body_length + 60), 8)
                pygame.draw.line(screen, BLACK, (self.x, self.y - body_length + 60), (self.x - arm_length // 2, self.y - body_length + 30), 8)
        elif self.stance == "attack":
            # Draw attacking arms
            if self.direction == "left":
                pygame.draw.line(screen, BLACK, (self.x, self.y - body_length + 60), (self.x - arm_length, self.y - body_length + 60), 8)
                pygame.draw.line(screen, BLACK, (self.x, self.y - body_length + 60), (self.x + arm_length // 2, self.y - body_length + 30), 8)
            else:
                pygame.draw.line(screen, BLACK, (self.x, self.y - body_length + 60), (self.x + arm_length, self.y - body_length + 60), 8)
                pygame.draw.line(screen, BLACK, (self.x, self.y - body_length + 60), (self.x - arm_length // 2, self.y - body_length + 30), 8)
        elif self.stance == "defend":
            pygame.draw.circle(screen, GREEN, (self.x, self.y - head_radius - body_length), head_radius)
            # Draw defending arms
            if self.direction == "left":
                pygame.draw.line(screen, BLACK, (self.x, self.y - body_length + 60), (self.x - arm_length // 2, self.y - body_length + 30), 8)
                pygame.draw.line(screen, BLACK, (self.x, self.y - body_length + 60), (self.x + arm_length // 2, self.y - body_length + 30), 8)
                pygame.draw.line(screen, BLACK, (self.x - arm_length // 2, self.y - body_length + 30), (self.x - arm_length // 2, self.y - body_length + 90), 8)
                pygame.draw.line(screen, BLACK, (self.x + arm_length // 2, self.y - body_length + 30), (self.x + arm_length // 2, self.y - body_length + 90), 8)
            else:
                pygame.draw.line(screen, BLACK, (self.x, self.y - body_length + 60), (self.x + arm_length // 2, self.y - body_length + 30), 8)
                pygame.draw.line(screen, BLACK, (self.x, self.y - body_length + 60), (self.x - arm_length // 2, self.y - body_length + 30), 8)
                pygame.draw.line(screen, BLACK, (self.x + arm_length // 2, self.y - body_length + 30), (self.x + arm_length // 2, self.y - body_length + 90), 8)
                pygame.draw.line(screen, BLACK, (self.x - arm_length // 2, self.y - body_length + 30), (self.x - arm_length // 2, self.y - body_length + 90), 8)

# 게임 루프
player1 = Stickman(200, 550, "right")
player2 = Stickman(600, 550, "left")
clock = pygame.time.Clock()

# OpenCV, MediaPipe 설정
cap = cv2.VideoCapture(0)
mp_pose = mp.solutions.pose
pose = mp_pose.Pose()

def detect_pose(image):
    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    results = pose.process(image_rgb)
    if results.pose_landmarks:
        return results.pose_landmarks.landmark
    return None

while True:
    ret, frame = cap.read()
    if not ret:
        break
    
    landmarks = detect_pose(frame)
    screen.fill(WHITE)
    frame = cv2.flip(frame, 1)
    frame_surface = pygame.surfarray.make_surface(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB))
    frame_surface = pygame.transform.rotate(frame_surface, -90)
    frame_surface = pygame.transform.scale(frame_surface, (screen_width, screen_height))
    screen.blit(frame_surface, (0, 0))

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            cap.release()
            pygame.quit()
            sys.exit()

    if landmarks:
        nose = landmarks[mp_pose.PoseLandmark.NOSE.value]
        left_shoulder = landmarks[mp_pose.PoseLandmark.LEFT_SHOULDER.value]
        right_shoulder = landmarks[mp_pose.PoseLandmark.RIGHT_SHOULDER.value]

        # 왼쪽 사람
        if nose.x < 0.5:
            if left_shoulder.y < nose.y:
                player1.stance = "attack"
            elif right_shoulder.y < nose.y:
                player1.stance = "defend"
            else:
                player1.stance = "idle"
        # 오른쪽 사람
        else:
            if left_shoulder.y < nose.y:
                player2.stance = "attack"
            elif right_shoulder.y < nose.y:
                player2.stance = "defend"
            else:
                player2.stance = "idle"

    # 화면을 반으로 나누기
    pygame.draw.line(screen, BLACK, (400, 0), (400, 600), 5)

    # 플레이어 그리기
    player1.draw(screen)
    player2.draw(screen)

    # 체력 표시
    health_text1 = font.render(f"Player 1 Health: {player1.health}", True, BLACK)
    health_text2 = font.render(f"Player 2 Health: {player2.health}", True, BLACK)
    screen.blit(health_text1, (50, 50))
    screen.blit(health_text2, (550, 50))

    pygame.display.flip()
    clock.tick(30)